[project]
name = "humanline-backend"
version = "1.0.0"
description = "Humanline HR Management System Backend API"
authors = [
    { name = "Humanline Team", email = "dev@humanline.com" }
]
requires-python = ">=3.11"
license = { text = "MIT" }
keywords = ["fastapi", "hr", "management", "api", "onboarding"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12", 
    "Programming Language :: Python :: 3.13",
    "Framework :: FastAPI",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]

dependencies = [
    "alembic>=1.16.5",
    "asyncpg>=0.30.0",
    "email-validator>=2.3.0",
    "fastapi>=0.117.1",
    "fastapi-debug-toolbar>=0.6.3",
    "greenlet>=3.2.4",
    "passlib[argon2,bcrypt]>=1.7.4",
    "psycopg2-binary>=2.9.10",
    "pydantic>=2.11.9",
    "pydantic-settings>=2.11.0",
    "python-dotenv>=1.1.1",
    "python-jose[cryptography]>=3.5.0",
    "python-multipart>=0.0.20",
    "sqlalchemy>=2.0.43",
    "uvicorn>=0.37.0",
    "aiosmtplib>=3.0.0",
    "jinja2>=3.1.6",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.4.2",
    "pytest-asyncio>=1.2.0",
    "pytest-cov>=7.0.0",
    "httpx>=0.28.1",
    "coverage>=7.10.7",
    "aiosqlite>=0.20.0",
    
    # Code Quality
    "ruff>=0.7.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
    
    # Security
    "bandit[toml]>=1.7.5",
    "safety>=3.0.0",
    "pip-audit>=2.6.0",
    
    # Performance
    "locust>=2.20.0",
    
    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.0",
]

[project.urls]
Homepage = "https://humanline.com"
Documentation = "https://docs.humanline.com"
Repository = "https://github.com/humanline/backend"
"Bug Tracker" = "https://github.com/humanline/backend/issues"

[project.scripts]
humanline-server = "main:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = [
    "api",
    "core", 
    "models",
    "schemas",
    "services",
    "middleware"
]

# Tool Configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--verbose",
    "--tb=short",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=90",
    "--cov-exclude=tests/*",
    "--cov-exclude=alembic/*",
    "--cov-exclude=main.py",
]
markers = [
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests (database required)",
    "api: API endpoint tests (full stack)",
    "slow: Slow running tests",
    "auth: Authentication related tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    "alembic/*", 
    "main.py",
    ".venv/*",
    "__pycache__/*",
    "*.pyc",
    ".coverage",
    "htmlcov/*",
]
branch = true
parallel = true

[tool.coverage.report]
fail_under = 90
show_missing = true
skip_covered = false
precision = 2
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"
title = "Humanline Backend Coverage Report"

[tool.coverage.xml]
output = "coverage.xml"

# Ruff Configuration (Fast Python Linter)
[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "S",   # bandit (security)
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "S101",  # use of assert (ok in tests)
    "S104",  # possible binding to all interfaces (ok for dev)
]
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "alembic/versions",
    "htmlcov",
]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = [
    "S101",  # asserts allowed in tests
    "ARG",   # unused function args in tests
    "S106",  # hardcoded passwords in tests
]

[tool.ruff.isort]
known-first-party = ["humanline"]

# MyPy Configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "alembic.*",
    "passlib.*",
    "jose.*",
    "aiosmtplib.*",
]
ignore_missing_imports = true

# Bandit Security Configuration
[tool.bandit]
exclude_dirs = ["tests", "alembic/versions"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection in tests

[tool.bandit.assert_used]
skips = ["**/test_*.py", "**/tests/*.py"]

[dependency-groups]
dev = [
    "aiosqlite>=0.21.0",
    "coverage>=7.10.7",
    "httpx>=0.28.1",
    "pytest>=8.4.2",
    "pytest-asyncio>=1.2.0",
    "pytest-cov>=7.0.0",
]
