# Unified Docker Compose for Humanline Full Stack Application
services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: humanline-postgres${CONTAINER_SUFFIX:-}
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-humanline}
      POSTGRES_USER: ${POSTGRES_USER:-humanline_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-humanline_secure_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/sql/init:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - humanline-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-humanline_user} -d ${POSTGRES_DB:-humanline}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: humanline-redis${CONTAINER_SUFFIX:-}
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_password}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - humanline-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV:-false}
    container_name: humanline-backend${CONTAINER_SUFFIX:-}
    restart: unless-stopped
    environment:
      # Database Configuration
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-humanline_user}:${POSTGRES_PASSWORD:-humanline_secure_password}@postgres:5432/${POSTGRES_DB:-humanline}
      
      # Redis Configuration
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379/0
      
      # Security Configuration
      SECRET_KEY: ${SECRET_KEY:-your-super-secret-key-change-this-in-production}
      ALGORITHM: ${ALGORITHM:-HS256}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      
      # CORS Configuration
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:3000,http://127.0.0.1:3000}
      
      # Environment
      ENVIRONMENT: ${ENVIRONMENT:-production}
      
      # Server Configuration
      HOST: 0.0.0.0
      PORT: 8000
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
      # Mount source code for development hot reloading (only if ENVIRONMENT=development)
      - type: bind
        source: ./backend
        target: /app
        bind:
          create_host_path: true
        # Only mount in development
        read_only: false
      # Exclude .venv from being overridden by the bind mount
      - /app/.venv
    networks:
      - humanline-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NODE_ENV: ${NODE_ENV:-production}
    container_name: humanline-frontend${CONTAINER_SUFFIX:-}
    restart: unless-stopped
    environment:
      # API Configuration
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL:-http://localhost:3000}
      
      # Environment
      NODE_ENV: ${NODE_ENV:-production}
      
      # Security
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-your-nextauth-secret}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    volumes:
      # Mount source code for development hot reloading (only if NODE_ENV=development)
      - type: bind
        source: ./frontend
        target: /app
        bind:
          create_host_path: true
        read_only: false
      # Exclude node_modules from being overridden
      - /app/node_modules
      - /app/.next
    networks:
      - humanline-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: humanline-nginx${CONTAINER_SUFFIX:-}
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - humanline-network
    depends_on:
      - backend
      - frontend
    profiles:
      - production
      - nginx

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# Custom network
networks:
  humanline-network:
    driver: bridge
